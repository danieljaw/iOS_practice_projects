import UIKit

/*
Imagine you want to write a function to calculate the area of a rectangle. However, if you pass a negative number into the function, you don't want it to calculate a negative area. Create a function called calculateArea that takes two Double parameters, x and y, and returns an optional Double. Write a guard statement at the beginning of the function that verifies each of the parameters is greater than zero and returns nil if not. When the guard has succeeded, calculate the area by multiplying x and y together, then return the area. Call the function once with positive numbers and once with at least one negative number.
*/

func calculateArea(x: Double, y: Double) -> Double? {
    guard x > 0 && y > 0 else {
        return nil
    }
    return x * y
}

let firstArea = calculateArea(x: 3, y: 6)
print("The first area is: \(firstArea!) m2.")

let secondArea = calculateArea(x: -100, y: 6)

// second

/*
Create a function called add that takes two optional integers as parameters and returns an optional integer. You should use one guard statement to unwrap both optional parameters, returning nil in the guard body if one or both of the parameters doesn't have a value. If both parameters can successfully be unwrapped, return their sum. Call the function once with non-nil numbers and once with at least one parameter being nil.
*/

func add(a: Int?, b: Int?) -> Int? {
    guard let a = a, let b = b else {
        return nil
    }
    return a + b
}

add(a: 9, b: 9)
add(a: nil, b: 10)
