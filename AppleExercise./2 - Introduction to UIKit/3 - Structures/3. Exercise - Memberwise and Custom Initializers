// If you completed the exercise Structs, Instances, and Default Values, you created a GPS struct with default values for properties of latitude and longitude. Create your GPS struct again, but this time do not provide default values. Both properties should be of type Double.

struct GPS {
    var latitude: Double
    var longitude: Double
}

// Now create a constant instance of GPS called somePlace, and use the memberwise initializer to set latitude to 51.514004, and longitude to 0.125226. Print the values of somePlace's properties.


// just to be clear: memberwise initializer - wtedy kiedy mamy nazwę struktury i nawiasy

let somePlace = GPS(latitude: 51.514004, longitude: 0.1252226)
print(somePlace.longitude)
print(somePlace.latitude)

// In Structs, Instance, and Default Values, you also created a Book struct with properties title, author, pages, and price. Create this struct again without default values. Give each property the appropriate type. Declare your favoriteBook instance and pass in the values of your favorite book using the memberwise initializer. Print a statement about your favorite book using favoriteBook's properties.

struct Book {
    var title: String
    var author: String
    var pages: Int
    var price: Double
}

let favoriteBook = Book(title: "Der kleine Prinz", author: "Antoine de Saint-Exupéry", pages: 100, price: 7.99)
print("My favourite book is called: \(favoriteBook.title) and its written by: \(favoriteBook.author). This book is translated in over than 100 languages and each books contains around \(favoriteBook.pages) pages. Usual price is \(favoriteBook.price) Euro")

// Make a Laptop struct with three variable properties, screenSize of type Int, repairCount of type Int, and yearPurchased of type Int. Give screenSize a default value of 13 and repairCount a default value of 0, and leave yearPurchased without a default value. Declare two instances of Laptop, using the two provided memberwise initializers.

struct Laptop {
    var screenSize: Int = 13
    var repairCount: Int = 0
    var yearPurchased: Int
}

let firstLaptop = Laptop(yearPurchased: 2022)
let secondLaptop = Laptop(screenSize: 15, yearPurchased: 2017)

// Make a Height struct with two variable properties, heightInInches and heightInCentimeters. Both should be of type Double.
// Create two custom initializers. One initializer will take a Double argument that represents height in inches. The other initializer will take a Double argument that represents height in centimeters. Each initializer should take the passed in value and use it to set the property that corresponds to the unit of measurement passed in. It should then set the other property by calculating the right value from the passed in value. Hint: 1 inch = 2.54 centimeters.

struct Height {
    var heightInInches: Double
    var heightInCentimeters: Double
    
    init(heightInInches: Double) {
        self.heightInInches = heightInInches
        self.heightInCentimeters = heightInInches * 2.54
    }
    
    init(heightInCentimeters: Double) {
        self.heightInCentimeters = heightInCentimeters
        self.heightInInches = heightInCentimeters / 2.54
    }
}


// Now create a variable instance of Height called someonesHeight. Use the initializer for inches to set the height to 65. Print out the property for height in centimeters and verify that it is equal to 165.1.

var someonesHeight = Height(heightInInches: 65)
print(someonesHeight.heightInCentimeters)

if someonesHeight.heightInCentimeters == 165.1 {
    print("Someones height in inches 65 is equal = 165.1")
} else {
    print("error")
}

// Now create a variable instance of Height called myHeight and initialize it with your own height. Verify that both heightInInches and heightInCentimeters are accurate.

var myHeight = Height(heightInCentimeters: 183)
print(myHeight.heightInCentimeters)
print(myHeight.heightInInches)
print("Verifying...")
var myHeightInInches = Height(heightInInches: 72.04724409448819)
print(myHeightInInches.heightInCentimeters)

print("Verified :)")
